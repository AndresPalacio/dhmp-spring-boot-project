plugins {
    id "java-gradle-plugin"
    id "io.spring.javaformat" version "${javaFormatVersion}"
    id "checkstyle"
    id "eclipse"
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

sourceCompatibility = 17
targetCompatibility = 17

def versions = [:]
new File(projectDir.parentFile, "gradle.properties").withInputStream {
    def properties = new Properties()
    properties.load(it)
    ["assertj", "commonsCodec", "hamcrest", "jackson", "junitJupiter",
     "kotlin", "maven"].each {
        versions[it] = properties[it + "Version"]
    }
}
versions["springFramework"] = "6.1.5"
ext.set("versions", versions)


checkstyle {
    toolVersion = "10.12.4"
}

dependencies {
    checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
    checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")

    implementation(platform("org.springframework:spring-framework-bom:${versions.springFramework}"))
    implementation("com.diffplug.gradle:goomph:3.37.2")
    implementation("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
    implementation("com.gradle:gradle-enterprise-gradle-plugin:3.12.1")
    implementation("com.tngtech.archunit:archunit:1.0.0")
    implementation("commons-codec:commons-codec:${versions.commonsCodec}")
    implementation("de.undercouch.download:de.undercouch.download.gradle.plugin:5.5.0")
    implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:${javaFormatVersion}")
    implementation("org.apache.maven:maven-embedder:${versions.maven}")
    implementation("org.asciidoctor:asciidoctor-gradle-jvm:3.3.2")
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}")
    implementation("org.jetbrains.kotlin:kotlin-compiler-embeddable:${versions.kotlin}")
    implementation("org.springframework:spring-context")
    implementation("org.springframework:spring-core")
    implementation("org.springframework:spring-web")

    testImplementation("org.assertj:assertj-core:${versions.assertj}")
    testImplementation("org.hamcrest:hamcrest:${versions.hamcrest}")
    testImplementation("org.junit.jupiter:junit-jupiter:${versions.junitJupiter}")
    testImplementation("org.springframework:spring-test")

}

gradlePlugin {
    plugins {

        bomPlugin {
            id = "org.springframework.boot.bom"
            implementationClass = "org.springframework.boot.build.bom.BomPlugin"
        }
        conventionsPlugin {
            id = "org.springframework.boot.conventions"
            implementationClass = "org.springframework.boot.build.ConventionsPlugin"
        }
        deployedPlugin {
            id = "org.springframework.boot.deployed"
            implementationClass = "org.springframework.boot.build.DeployedPlugin"
        }
        mavenPluginPlugin {
            id = "org.springframework.boot.maven-plugin"
            implementationClass = "org.springframework.boot.build.mavenplugin.MavenPluginPlugin"
        }
        mavenRepositoryPlugin {
            id = "org.springframework.boot.maven-repository"
            implementationClass = "org.springframework.boot.build.MavenRepositoryPlugin"
        }
        optionalDependenciesPlugin {
            id = "org.springframework.boot.optional-dependencies"
            implementationClass = "org.springframework.boot.build.optional.OptionalDependenciesPlugin"
        }
        starterPlugin {
            id = "org.springframework.boot.starter"
            implementationClass = "org.springframework.boot.build.starters.StarterPlugin"
        }
    }
}



